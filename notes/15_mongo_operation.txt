>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> cmd连接远程mongodb <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# 启动服务  本地服務
mongod --dbpath  /home/u1/mongodb/data  [--logpath  /home/u1/mongodb/log/logs  --fork --auth]
# 停止服务 ： 必须进入admin数据库后停止
user admin
db.shutdownServer()

# 连接远程mongodb
> mongo 192.168.1.215:27017/admin -u <account> -p <password> # 授权登录并进入admin数据库

use admin
db.auth("spindle","spindle123456")

> use runoob
switched to db runoob
> db.createCollection("runoob")     # 先创建集合，类似数据库中的表



选择开发计算机上用于存储数据的目录。 例如，Windows 上的 C:\BooksData 。 创建目录（如果不存在）。 mongo Shell 不会创建新目录。

打开命令行界面。 运行以下命令以连接到默认端口 27017 上的 MongoDB。 请记得将 <data_directory_path> 替换为上一步中选择的目录。
console

mongod --dbpath <data_directory_path>

打开另一个命令行界面实例。 通过运行以下命令来连接到默认测试数据库：
console

mongo

在命令行界面中运行下面的命令：
console

use BookstoreDb

如果它不存在，则将创建名为 BookstoreDb 的数据库。 如果该数据库存在，则将为事务打开其连接。

使用以下命令创建 Books 集合：
console

db.createCollection('Books')

显示以下结果：
console

{ "ok" : 1 }

使用以下命令定义 Books 集合的架构并插入两个文档：
console

db.Books.insertMany([{'Name':'Design Patterns','Price':54.93,'Category':'Computers','Author':'Ralph Johnson'}, {'Name':'Clean Code','Price':43.15,'Category':'Computers','Author':'Robert C. Martin'}])

显示以下结果：
console

{
  "acknowledged" : true,
  "insertedIds" : [
    ObjectId("5bfd996f7b8e48dc15ff215d"),
    ObjectId("5bfd996f7b8e48dc15ff215e")
  ]
}

备注

本文所示的 ID 与运行此示例时的 ID 不匹配。

使用以下命令查看数据库中的文档：
console

db.Books.find({}).pretty()


# 进入容器mongodb中的admin数据库并新建用户
[centos@localhost ~]$ docker exec -it mongodb mongo admin
MongoDB shell version v4.2.1
connecting to: mongodb://127.0.0.1:27017/admin?compressors=disabled&gssapiServiceName=mongodb
xxxxx

> db.createUser({user:"spindle", pwd:"spindle123456", roles:["userAdminAnyDatabase", "dbAdminAnyDatabase", "readWriteAnyDatabase"]});

# 测试是否创建和配置用户成功 （window下远程连接）
C:\Users\Wang>mongo 192.168.1.214:27017/admin
> show dbs	
> db.auth("spindle","spindle123456")
1
> show dbs
admin   0.000GB xxxx

> use SpindlestoreDb
switched to db SpindlestoreDb
> db.dropDatabase()
{ "dropped" : "SpindlestoreDb", "ok" : 1 }


索引：
	1、查看集合索引
	db.col.getIndexes()
	2、查看集合索引大小
	db.col.totalIndexSize()
	3、删除集合所有索引
	db.col.dropIndexes()
	4、删除集合指定索引
	db.col.dropIndex("索引名称")
	5. 创建索引
	db.collection.createIndex(keys, options)
	语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。
	eg.
		db.col.createIndex({"title":1})									# title 字段 升序创建索引
		db.col.createIndex({"title":1,"description":-1})				# 多字段索引，混合索引
		db.col.createIndex({"createDate": 1},{expireAfterSeconds: 180})	# TTL索引，过期自动删除， 第二个参数{}为option
	TTL索引注意事项：
		1) 索引关键字段必须是 Date 类型。
		2) 非立即执行：扫描 Document 过期数据并删除是独立线程执行，默认 60s 扫描一次，删除也不一定是立即删除成功。
		3) 单字段索引，混合索引不支持。