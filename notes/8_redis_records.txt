terminal连接远程redis服务
redis-cli -h 192.168.1.215 -p 6379 -a spindle123456 -n 15
	Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]
	  -h <hostname>    Server hostname (default: 127.0.0.1)
	  -p <port>        Server port (default: 6379)
	  -s <socket>      Server socket (overrides hostname and port)
	  -a <password>    Password to use when connecting to the server
	  -r <repeat>      Execute specified command N times
	  -i <interval>    When -r is used, waits <interval> seconds per command.
					   It is possible to specify sub-second times like -i 0.1.
	  -n <db>          Database number
	  -x               Read last argument from STDIN
	  -d <delimiter>   Multi-bulk delimiter in for raw formatting (default: \n)
	  --raw            Use raw formatting for replies (default when STDOUT is not a tty)
	  --latency        Enter a special mode continuously sampling latency.
	  --help           Output this help and exit
	  --version        Output version and exit
	Examples:
	  cat /etc/passwd | redis-cli -x set mypasswd
	  redis-cli get mypasswd
	  redis-cli -r 100 lpush mylist x
	  redis-cli -r 100 -i 1 info | grep used_memory_human:

本地启动redis
# cmd1中，保持服务一致运行状态
redis-server

# cmd2中 命令： redis-cli  (redis-cli --raw 可避免中文乱码 未验证)
C:\Users\Wang>redis-cli
redis 127.0.0.1:6379> set testkey 'hello world'
OK
redis 127.0.0.1:6379> get testkey
"hello world"
redis 127.0.0.1:6379>

# 选择数据库(redis数据库以数字标识，0-15，默认16个数据库，可在配置文件中更改)
database 64	# 修改redis.conf下的databases指令,将数据库设置为默认64个
select 1	# 选择1号数据库
keys * 		# 查询当前数据库下的所有key
get emp		# 获取key=emp对应的value
flushdb		# 清楚当前数据库

redis没有提供任何方法来关联标识不同的数据库。因此，需要你来跟踪什么数据存储到哪个数据库下

# docker中部署redis (192.168.1.215:6379)
docker pull redis
docker run -d --name redis-server -p 6379:6379 -v /opt/redisdatastore/data:/data redis --requirepass "spindle123456" --appendonly yes
	: -v /opt/redisdatastore/data:/data   容器挂载
	: --requirepass "spindle123456"   设置密码
	: --appendonly yes 在容器执行启动命令，并打开redis持久化配置
# 容器中验证redis安装情况
[centos@localhost ~]$ docker exec -it redis-server bash
root@78af5632bba5:/data# redis-cli 
127.0.0.1:6379> keys *
(error) NOAUTH Authentication required.		# 需要密码验证 
127.0.0.1:6379> auth spindle123456			# auth xxxx   验证密码
OK
127.0.0.1:6379> keys *
(empty list or set)


# redis 发布/订阅模式(即发即弃模式)
1. 这些消息并没有持久化机制，属于即发即弃模式, 所以Redis也不需要专门制定消息的备份和恢复机制；
2. 没有必要专门对使用订阅/发布功能的客户端连接进行识别，用来明确该客户端连接的ID是否在之前已经连接过Redis服务
3. Redis也没有为发布者和订阅者准备保证消息性能的任何方案，例如在大量消息同时到达Redis服务是，如果消息订阅者来不及完成消费，就可能导致消息堆积
4. Redis发布订阅模式不支持集群,生产中如果使用了发布订阅达到了性能瓶颈就很难再通过集群解决了
5. 客户端和服务端必须同时在线


# redis key-value(sequence) 设置和查询列表内容
192.168.1.215:6379> lpush mylist 12 34 55 90
(integer) 4
192.168.1.215:6379> lrange mylist 0 -1
1) "90"
2) "55"
3) "34"
4) "12"
192.168.1.215:6379> 


